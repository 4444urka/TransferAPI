from django.db.models.signals import m2m_changed, pre_delete, pre_save, post_save, post_delete
from django.dispatch import receiver
import logging
from django.conf import settings
from apps.booking.models import Booking
from apps.seat.models import TripSeat
import requests
from datetime import datetime
from django.utils import timezone
from django.db import transaction
from django.core.cache import cache


logger = logging.getLogger(__name__)


@receiver(m2m_changed, sender=Booking.trip_seats.through)
def update_seat_booking_status(sender, instance, action, pk_set, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç –ø—Ä–∏ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if action in ["post_add", "post_remove", "post_clear"]:
        # –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å is_active –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if action == "post_add" and pk_set:
            trip_seats = TripSeat.objects.filter(pk__in=pk_set)
            for trip_seat in trip_seats:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
                trip_seat.is_booked = instance.is_active
                trip_seat.save()

        # –ü—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö –º–µ—Å—Ç –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏—Ö
        elif action in ["post_remove", "post_clear"]:
            #  –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ post_remove
                trip_seats = TripSeat.objects.filter(pk__in=pk_set)
                for trip_seat in trip_seats:
                    trip_seat.is_booked = False
                    trip_seat.save()


@receiver(pre_delete, sender=Booking)
def release_seats_on_booking_delete(sender, instance, **kwargs):
    """
    –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –º–µ—Å—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    for trip_seat in instance.trip_seats.all():
        trip_seat.is_booked = False
        trip_seat.save()

@receiver(pre_save, sender=Booking)
def release_seats_on_deactivation(sender, instance, **kwargs):
    """
    –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –º–µ—Å—Ç–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if instance.pk:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        try:
            previous = Booking.objects.get(pk=instance.pk)
            # –ï—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
            if previous.is_active and not instance.is_active:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–∞
                for trip_seat in instance.trip_seats.all():
                    trip_seat.is_booked = False
                    trip_seat.save()
        except Booking.DoesNotExist:
            pass

def format_booking(booking):

    local_tz = timezone.get_current_timezone()
    local_time = booking.trip.departure_time.astimezone(local_tz)

    dt = local_time.strftime("%d.%m.%Y %H:%M")
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if booking.is_active else "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
    price = booking.total_price
    price_str = f"{int(price)} —Ä—É–±." if price == int(price) else f"{price:.2f} —Ä—É–±."
    seats_info = ", ".join([str(ts.seat.seat_number) for ts in booking.trip_seats.all()])
    text = (
        f"üöñ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
        f"üìÖ –î–∞—Ç–∞: {dt}\n"
        f"üìç –û—Ç–∫—É–¥–∞: {booking.pickup_location}\n"
        f"üèÅ –ö—É–¥–∞: {booking.dropoff_location}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_str}\n"
        f"üí∫ –ú–µ—Å—Ç–∞: {seats_info if seats_info else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"üîπ –°—Ç–∞—Ç—É—Å: {status}"
    )
    return text

def send_telegram_message(chat_id, text):
    bot_token = settings.TELEGRAM_BOT_TOKEN
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {'chat_id': chat_id, 'text': text}
    try:
        response = requests.post(url, data=data)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@receiver(post_save, sender=Booking)
def booking_post_save(sender, instance, created, **kwargs):
    if created:
        transaction.on_commit(lambda: handle_new_booking(instance))

def handle_new_booking(booking):
    user = booking.user
    if user.chat_id:
        message = format_booking(booking)
        send_telegram_message(user.chat_id, message)



def invalidate_booking_cache(user_id):
    cache_key = f"booking_detailed_{user_id}"
    cache.delete(cache_key)

@receiver(post_save, sender=Booking)
def booking_updated(sender, instance, **kwargs):
    """
    –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if instance.user:
        logger.debug(f"Invalidating booking cache for user {instance.user.id}")
        invalidate_booking_cache(instance.user.id)

@receiver(post_delete, sender=Booking)
def booking_deleted(sender, instance, **kwargs):
    """
    –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if instance.user:
        logger.debug(f"Invalidating booking cache for user {instance.user.id}")
        invalidate_booking_cache(instance.user.id)
