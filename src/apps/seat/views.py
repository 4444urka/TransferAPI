from typing import Any
from rest_framework import mixins, viewsets, status
from rest_framework.permissions import IsAdminUser
from rest_framework.response import Response
from rest_framework.decorators import action
from django.core.cache import cache
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi

from apps.seat.models import Seat, TripSeat
from apps.seat.permissions import HasSeatPermission
from apps.seat.serializers import SeatSerializer
from apps.vehicle.models import Vehicle
from .services import SeatService


class SeatViewSet(mixins.ListModelMixin,
                  mixins.RetrieveModelMixin,
                  mixins.UpdateModelMixin,
                  viewsets.GenericViewSet):
    """
    ViewSet –¥–ª—è –º–æ–¥–µ–ª–∏ Seat —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è.

    –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
    - list (GET): –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç.
    - retrieve (GET): –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞.
    - update / partial_update (PUT/PATCH): —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç.
    - getSeatsByVehicle (GET): –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç –ø–æ ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.

    –°–æ–∑–¥–∞–Ω–∏–µ (POST) –∏ —É–¥–∞–ª–µ–Ω–∏–µ (DELETE) –æ—Ç–∫–ª—é—á–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫:
    - –ú–µ—Å—Ç–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ (—á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã).
    - –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.


    """

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.seat_service = SeatService()
    queryset = Seat.objects.all()  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º queryset
    serializer_class = SeatSerializer

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–º–∏—à–µ–∫–∏ üòò
    def get_permissions(self):
        return [HasSeatPermission()]

    @swagger_auto_schema(
        operation_description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–µ—Å—Ç",
        operation_summary="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Å—Ç",
        tags=["–ú–µ—Å—Ç–∞"]
    )
    def list(self, request, *args, **kwargs):
        try: 
            seats = self.seat_service.get_all_seats()
            serializer = self.get_serializer(seats, many=True)
            return Response(serializer.data)
        except Exception as e:
            return Response({"detail": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


    @swagger_auto_schema(
        operation_description="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ",
        operation_summary="–î–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞",
        tags=["–ú–µ—Å—Ç–∞"]
    )
    def retrieve(self, request, *args, **kwargs):
        try:
            seat = self.seat_service.get_seat_by_id(kwargs.get('pk'))
            serializer = self.get_serializer(seat)
            return Response(serializer.data)
        except Exception as e:
            return Response({"detail": str(e)}, status=status.HTTP_404_NOT_FOUND)
        

    @swagger_auto_schema(
        operation_description="–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è)",
        operation_summary="–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞",
        tags=["–ú–µ—Å—Ç–∞"],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'seat_type': openapi.Schema(type=openapi.TYPE_STRING, description='–¢–∏–ø –º–µ—Å—Ç–∞ (front, middle, back)')
            }
        )
    )
    def partial_update(self, request, *args, **kwargs):
        return self._update(request, partial=True)

    def _update(self, request, partial: bool):
        try:
            seat = self.seat_service.get_seat_by_id(self.kwargs.get('pk'))
        except Exception as e:
            return Response({"detail": str(e)}, status=status.HTTP_404_NOT_FOUND)

        serializer = self.get_serializer(seat, data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)
        
        try:
            updated_seat = self.seat_service.update_seat(seat.id, serializer.validated_data)
            output_serializer = self.get_serializer(updated_seat)
            return Response(output_serializer.data)
        except Exception as e:
            return Response({"detail": str(e)}, status=status.HTTP_400_BAD_REQUEST)

    @swagger_auto_schema(
        operation_description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ (–∑–∞–ø—Ä–µ—â–µ–Ω–æ)",
        operation_summary="–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Å—Ç–∞",
        tags=["–ú–µ—Å—Ç–∞"]
    )
    def create(self, request, *args, **kwargs):
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Å—Ç —á–µ—Ä–µ–∑ API
        return Response(
            {"detail": "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Å—Ç —á–µ—Ä–µ–∑ API –∑–∞–ø—Ä–µ—â–µ–Ω–æ"},
            status=status.HTTP_405_METHOD_NOT_ALLOWED
        )

    @swagger_auto_schema(
        operation_description="–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ (–∑–∞–ø—Ä–µ—â–µ–Ω–æ)",
        operation_summary="–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞",
        tags=["–ú–µ—Å—Ç–∞"]
    )
    def destroy(self, request, *args, **kwargs):
        # –ó–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç —á–µ—Ä–µ–∑ API
        return Response(
            {"detail": "–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç —á–µ—Ä–µ–∑ API –∑–∞–ø—Ä–µ—â–µ–Ω–æ"},
            status=status.HTTP_405_METHOD_NOT_ALLOWED
        )

    @swagger_auto_schema(
        operation_description="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
        operation_summary="–ú–µ—Å—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
        manual_parameters=[
            openapi.Parameter('vehicle_id', openapi.IN_PATH, description="ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞",
                              type=openapi.TYPE_INTEGER)
        ],
        tags=["–ú–µ—Å—Ç–∞"]
    )
    @action(detail=False, methods=['get'], url_path='by_vehicle/(?P<vehicle_id>\d+)')
    def get_seats_by_vehicle(self, request, vehicle_id=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        try:
            seats = self.seat_service.get_seats_by_vehicle(vehicle_id)
            serializer = self.get_serializer(seats, many=True)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({"detail": str(e)}, status=status.HTTP_404_NOT_FOUND)
