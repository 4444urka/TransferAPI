from telebot import types
from api import ApiClient 
from bot.setup import config
from datetime import datetime

def setup_handlers(bot):

    def auth_keyboard():
        """Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True, 
            resize_keyboard=True
        )
        markup.add(types.KeyboardButton(
            "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", 
            request_contact=True
        ))
        return markup


    @bot.message_handler(commands=['start'])
    def handle_start(message):
        bot.send_message(message.chat.id, "–î–ª—è –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=auth_keyboard())


    @bot.message_handler(content_types=['contact'])
    def handle_contact(message):
        phone = message.contact.phone_number
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: process_password(m, phone))


    def main_menu():
        """Inline-–º–µ–Ω—é –æ—Å–Ω–æ–≤–Ω–æ–µ"""
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üöñ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data='bookings'),
            types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='logout')
        )
        return markup
    
    def process_password(message, phone):
        tokens = ApiClient.authenticate(phone, message.text)
        if tokens:
            config.store_user_data(message.chat.id, {
                'access': tokens['access'],
                'refresh': tokens['refresh'],
                'phone': phone
            })
            user_id = ApiClient.get_user_info(tokens["access"])['id']
            ApiClient.update_chat_id(tokens['access'], user_id, message.chat.id)
            bot.send_message(message.chat.id, f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", reply_markup=auth_keyboard())


    @bot.message_handler(commands=['logout'])
    def handle_logout(message):
        chat_id = message.chat.id
        user_data = config.get_user_data(chat_id)
        
        try:
            # # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Django
            if user_data and user_data.get('access'):
                user_id = ApiClient.get_user_info(user_data["access"])['id']
                ApiClient.update_chat_id(user_data['access'], user_id)
            
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
            config.delete_user_data(chat_id)
            
            bot.send_message(chat_id, "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!")
        except:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ!")


    def format_bookings_response(response):
        try:
            bookings = response.get('results', [])
            if not bookings:
                return "üöñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"

            formatted = []
            for idx, booking in enumerate(bookings, 1):
                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                dt = datetime.fromisoformat(booking['booking_datetime'])
                booking_date = dt.strftime("%d.%m.%Y %H:%M")
                
                # –°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if booking['is_active'] else "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
                price = f"{int(booking['total_price'])} —Ä—É–±." if booking['total_price'].is_integer() else f"{booking['total_price']:.2f} —Ä—É–±."

                # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                text = (
                    f"üöñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{idx}\n"
                    f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
                    f"üìç  –û—Ç–∫—É–¥–∞: {booking['pickup_location']}\n"
                    f"üèÅ –ö—É–¥–∞: {booking['dropoff_location']}\n"
                    f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}\n"
                    # f"üí∫ –ú–µ—Å—Ç–∞: {seats_info if seats_info else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
                    f"üîπ –°—Ç–∞—Ç—É—Å: {status}"
                )
                formatted.append(text)

            header = f"üöñ –ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(bookings)}\n\n"
            return header + "\n\n".join(formatted)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö"

    @bot.callback_query_handler(func=lambda call: True)
    def handle_booking(call):
        chat_id = call.message.chat.id
        user_data = config.get_user_data(chat_id)
        if call.data == 'bookings':
            if not user_data:
                return bot.send_message(
                    chat_id, 
                    "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!",    
                    reply_markup=auth_keyboard()
                )
            
            response = ApiClient.get_bookings(user_data['access'])
            if not response:
                new_token = ApiClient.refresh_token(user_data['refresh'])
                if new_token:
                    config.store_user_data(chat_id, {'access': new_token['access']})
                    response = ApiClient.get_bookings(new_token['access'])
            
            if response:
                text = format_bookings_response(response)

                bot.send_message(chat_id, text, reply_markup=main_menu())
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        elif call.data == 'logout':
            config.delete_user_data(chat_id)
            bot.answer_callback_query(call.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏!")
            bot.send_message(
                chat_id, 
                "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:",
                reply_markup=auth_keyboard()
            )

            



