from telebot import types
from datetime import datetime
from bot.api import ApiClient
from bot.setup import config
from bot.handlers.common import main_menu, auth_keyboard
from bot.tools import show_bookings
import logging

logger = logging.getLogger(__name__)



def register_booking_handlers(bot):
    @bot.callback_query_handler(func=lambda call: True)
    def handle_booking(call):
        try:
            chat_id = call.message.chat.id
            user_data = config.get_user_data(chat_id)
            
            if call.data == 'bookings':
                # –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                if not user_data or not user_data.get('refresh'):
                    logger.warning(f"Unauthorized access attempt: {chat_id}")
                    bot.send_message(chat_id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!", reply_markup=auth_keyboard())
                    return

                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
                access_token = user_data.get('access', '')
                response = ApiClient.get_bookings(access_token)
                
                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
                if not response:
                    logger.info(f"Token refresh initiated for: {chat_id}")
                    try:
                        new_tokens = ApiClient.refresh_tokens(user_data['refresh'])
                    except KeyError:
                        logger.error("Refresh token missing in user_data")
                        bot.send_message(chat_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=auth_keyboard())
                        return
                    except Exception as e:
                        logger.error(f"Refresh failed: {str(e)}")
                        bot.send_message(chat_id, "üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=auth_keyboard())
                        return

                    if new_tokens and 'access' in new_tokens and 'refresh' in new_tokens:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                        config.store_user_data(chat_id, {
                            'access': new_tokens['access'],
                            'refresh': new_tokens['refresh']
                        })
                        response = ApiClient.get_bookings(new_tokens['access'])

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if response:
                    text = show_bookings(response)
                    bot.send_message(chat_id, text, reply_markup=main_menu())
                else:
                    bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")

            elif call.data == 'logout':
                config.delete_user_data(chat_id)
                bot.answer_callback_query(call.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏!")
                bot.send_message(chat_id, "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:", reply_markup=auth_keyboard())

        except Exception as e:
            logger.critical(f"Critical error in booking handler: {str(e)}", exc_info=True)
            bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")