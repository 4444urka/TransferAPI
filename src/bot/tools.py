from datetime import datetime

# def get_cached_trips(access_token):
#     """
#     –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –∫–µ—à–∞ (Redis). –ï—Å–ª–∏ –∫–µ—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω,
#     –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API, —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à–µ, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫.
    
#     Args:
#         access_token (str): Access-—Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API.
        
#     Returns:
#         list: –°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫ (–æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–∞–∂–¥–∞—è –ø–æ–µ–∑–¥–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å).
#     """
#     if not access_token:
#         return []
#     cache_key = "active_trips_list"
#     trips = cache.get(cache_key)
#     if trips is None:
#         trips = ApiClient.get_trips(access_token=access_token)['results']
#         if trips is None:
#             trips = []
#         cache.set(cache_key, trips, timeout=300)
#     return trips

# def get_trip_by_id(trip_id, access_token):
#     """
#     –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–µ–∑–¥–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫.
    
#     Args:
#         trip_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–µ–∑–¥–∫–∏.
#         access_token (str): Access-—Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ get_cached_trips).
        
#     Returns:
#         dict: –ù–∞–π–¥–µ–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
#     """
#     trips = get_cached_trips(access_token)
#     for trip in trips:
#         if isinstance(trip, dict) and trip.get('id') == trip_id:
#             return trip
#     return None

def format_booking(index, booking):

    try:
        departure_time = booking['trip']['departure_time']
        dt = datetime.fromisoformat(departure_time)
        booking_date = dt.strftime("%d.%m.%Y %H:%M")
    except:
        booking_date = "N/A"

    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if booking['is_active'] else "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
    price = float(booking['total_price'])
    price_str = f"{int(price)} —Ä—É–±." if price == int(price) else f"{price:.2f} —Ä—É–±."
    # seats_info = ", ".join([str(ts['seat']['seat_number']) for ts in booking['trip_seats'].all()])
    seats = booking.get('seat_numbers', [])
    if seats:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫–∏
        seats_info = ", ".join(str(seat) for seat in seats)
    else:
        seats_info = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"    
    text = (
        f"üöñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{index}!\n"
        f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
        f"üìç –û—Ç–∫—É–¥–∞: –≥. {booking['trip']['origin']['name']}, {booking['pickup_location']}\n"
        f"üèÅ –ö—É–¥–∞: –≥. {booking['trip']['destination']['name']}, {booking['dropoff_location']}\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_str}\n"
        f"üí∫ –ú–µ—Å—Ç–∞: {seats_info if seats_info else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"üîπ –°—Ç–∞—Ç—É—Å: {status}"
    )
    return text

def show_bookings(response):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è ID –ø–æ–µ–∑–¥–∫–∏, –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏.
    
    Args:
        response (dict): –û—Ç–≤–µ—Ç API –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª–µ 'results' —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.
        access_token (str): Access-—Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫).
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
    """
    try:
        bookings = response.get('results', [])
        if not bookings:
            return "üöñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
        formatted = []
        for idx, booking in enumerate(bookings, 1):
            # # trip = get_trip_by_id(trip_id, access_token=access_token)
            # try:
            #     departure_time = booking['trip']['departure_time']
            #     dt = datetime.fromisoformat(departure_time)
            #     booking_date = dt.strftime("%d.%m.%Y %H:%M")
            # except:
            #     booking_date = "N/A"
            
            # status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if booking.get('is_active') else "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"

            # total_price = booking.get('total_price', 0)
            # try:
            #     total_price_float = float(total_price)
            #     if total_price_float == int(total_price_float):
            #         price = f"{int(total_price_float)} —Ä—É–±."
            #     else:
            #         price = f"{total_price_float:.2f} —Ä—É–±."
            # except Exception:
            #     price = str(total_price)

            # text = (
            #     f"üöñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{idx}\n"
            #     f"üìÖ –î–∞—Ç–∞: {booking_date}\n"
            #     f"üìç –û—Ç–∫—É–¥–∞: {booking.get('pickup_location', 'N/A')}\n"
            #     f"üèÅ –ö—É–¥–∞: {booking.get('dropoff_location', 'N/A')}\n"
            #     f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}\n"
            #     f"üîπ –°—Ç–∞—Ç—É—Å: {status}"
            # )
            text = format_booking(idx, booking)
            formatted.append(text)
        header = f"üöñ –ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(bookings)}\n\n"
        return header + "\n\n".join(formatted)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö"
